@page "/"

@implements IDisposable

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using CountdownTimer.Model;

@inject ProtectedLocalStorage ProtectedLocalStorage

<div class="container">
    <div class="row">
        <div class="col-lg-12">
            <div id="content">
                <h1><span class="oi oi-clock"></span> Countdown Timer</h1>

                <EditForm Model="@countdownTimerEvent" OnValidSubmit="@HandleValidSubmitAsync">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <h3>
                        Date:
                        <InputDate id="date" DisplayName="Date" @bind-Value="countdownTimerEvent.Date" />
                    </h3>

                    <p>
                        <button type="submit">Start</button>
                        <button type="button" @onclick="HandleStopAsync">Stop</button>
                    </p>

                    <hr>

                    <button class="btn btn-default btn-lg" type="submit">
                        <span>D: @countdownTimerEvent.TimeLeft.Days</span>
                        <span>H: @countdownTimerEvent.TimeLeft.Hours</span>
                        <span>M: @countdownTimerEvent.TimeLeft.Minutes</span>
                        <span>S: @countdownTimerEvent.TimeLeft.Seconds</span>
                    </button>
                </EditForm>

            </div>
        </div>
    </div>
</div>

@code {
    private CountdownTimer countdownTimerEvent = new();

    protected override async Task OnInitializedAsync()
    {
        countdownTimerEvent.OnTick += (s, e) => { InvokeAsync(StateHasChanged); };

        var storageResultDate = await ProtectedLocalStorage.GetAsync<DateTime>("CountdownTimer_Date");
        if (storageResultDate.Success)
        {
            countdownTimerEvent.Date = storageResultDate.Value;
        }

        var storageResultIsRunning = await ProtectedLocalStorage.GetAsync<bool>("CountdownTimer_IsRunning");
        if (storageResultIsRunning.Success && storageResultIsRunning.Value)
        {
            await HandleValidSubmitAsync();
        }

        await base.OnInitializedAsync();
    }

    private async Task HandleValidSubmitAsync()
    {
        await ProtectedLocalStorage.SetAsync("CountdownTimer_Date", countdownTimerEvent.Date);

        countdownTimerEvent.Start();

        await ProtectedLocalStorage.SetAsync("CountdownTimer_IsRunning", true);
    }

    private async Task HandleStopAsync()
    {
        countdownTimerEvent.Stop();

        await ProtectedLocalStorage.SetAsync("CountdownTimer_IsRunning", false);
    }

    public void Dispose() => countdownTimerEvent.Dispose();
}
